{
    //
    // Python Vscode extension settings
    //
    //
    "python.pythonPath": "${workspaceFolder}/.venv/bin/python",
    "python.envFile": "${workspaceFolder}/.venv",
    "python.poetryPath": "poetry",
    "python.analysis.typeCheckingMode": "basic",
    "python.analysis.completeFunctionParens": true,
    // Pytest
    "python.testing.unittestEnabled": false,
    "python.testing.pytestEnabled": true,
    "python.testing.pytestPath": "${workspaceFolder}/.venv/bin/pytest",
    // Black formatter
    "python.formatting.provider": "black",
    "python.formatting.blackPath": "${workspaceFolder}/.venv/bin/black",
    "python.formatting.blackArgs": [
        "--line-length",
        "{{cookiecutter.editor_line_length}}"
    ],
    // Isort to sort import statements
    "python.sortImports.path": "${workspaceFolder}/.venv/bin/isort",
    "python.sortImports.args": [
        "--profile",
        "black"
    ],
    // Pylint
    "python.linting.enabled": true,
    "python.linting.lintOnSave": true,
    "python.linting.ignorePatterns": [
        ".venv/**/*.py",
        ".vscode/*.py",
        "tests"
    ],
    "python.linting.pylintEnabled": true,
    "python.linting.pylintPath": "${workspaceFolder}/.venv/bin/pylint",
    //
    //
    // Python type hint extension settings
    "workspace.searchEnabled": false,
    //
    //
    // General settings
    //
    //
    // Configure glob patterns for excluding files and folders. 
    // For example, the file Explorer decides which files and folders to show or hide based on this setting. 
    // Refer to the `search.exclude` setting to define search specific excludes.
    "files.exclude": {
        "**/.git": true,
        "**/.svn": true,
        "**/.hg": true,
        "**/CVS": true,
        "**/.DS_Store": true,
        "**/Thumbs.db": true,
        ".pytest_cache": true,
        "**/__pycache__": true,
        ".venv": true
    },
    // When enabled, insert a final new line at the end of the file when saving it.
    "files.insertFinalNewline": true,
    // Enable/disable navigation breadcrumbs.
    "breadcrumbs.enabled": false,
    //
    //
    // Controls whether bracket pair colorization is enabled or not.
    // Use 'workbench.colorCustomizations' to override the bracket highlight colors.
    "editor.bracketPairColorization.enabled": true,
    // Controls the font family.
    "editor.fontFamily": "'DejaVu Sans Mono', 'monospace'",
    // Bold font
    "editor.fontWeight": "600",
    // Controls the font size in pixels.
    "editor.fontSize": 14,
    // Configures font ligatures or font features. 
    // Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
    "editor.fontLigatures": false,
    // Controls the line height.
    //  - Use 0 to automatically compute the line height from the font size.
    //  - Values between 0 and 8 will be used as a multiplier with the font size.
    //  - Values greater than or equal to 8 will be used as effective values.
    "editor.lineHeight": 1.4,
    // Controls the display of line numbers.
    //  - off: Line numbers are not rendered.
    //  - on: Line numbers are rendered as absolute number.
    //  - relative: Line numbers are rendered as distance in lines to cursor position.
    //  - interval: Line numbers are rendered every 10 lines.
    "editor.lineNumbers": "off",
    // Controls whether the editor should detect links and make them clickable.
    "editor.links": false,
    // Controls the cursor style.
    "editor.cursorStyle": "block-outline",
    // Control the cursor animation style.
    "editor.cursorBlinking": "solid",
    // Controls whether the minimap is shown.
    "editor.minimap.enabled": false,
    // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
    "editor.glyphMargin": true,
    // Controls whether the editor has code folding enabled.
    "editor.folding": false,
    // Controls the visibility of the vertical scrollbar.
    //  - auto: The vertical scrollbar will be visible only when necessary.
    //  - visible: The vertical scrollbar will always be visible.
    //  - hidden: The vertical scrollbar will always be hidden.
    "editor.scrollbar.vertical": "hidden",
    // Controls whether the editor will scroll using an animation.
    "editor.smoothScrolling": true,
    // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
    "editor.mouseWheelScrollSensitivity": 5,
    // Controls whether the editor should allow moving selections via drag and drop.
    "editor.dragAndDrop": false,
    // Controls whether copying without a selection copies the current line.
    "editor.emptySelectionClipboard": false,
    // Format a file on save. A formatter must be available, the file must not be saved after delay, 
    // and the editor must not be shutting down.
    "editor.formatOnSave": true,
    // Code action kinds to be run on save.
    "editor.codeActionsOnSave": {
        "source.organizeImports": true
    },
    //
    //
    // Controls whether the explorer should render folders in a compact form. 
    // In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
    "explorer.compactFolders": false,
    // Controls whether file decorations should use badges.
    "explorer.decorations.badges": false,
    // Controls the property-based sorting of files and folders in the explorer.
    //  - default: Files and folders are sorted by their names. Folders are displayed before files.
    //  - mixed: Files and folders are sorted by their names. Files are interwoven with folders.
    //  - filesFirst: Files and folders are sorted by their names. Files are displayed before folders.
    //  - type: Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.
    //  - modified: Files and folders are sorted by last modified date in descending order. Folders are displayed before files.
    "explorer.sortOrder": "filesFirst",
    //
    //
    // Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.
    "workbench.editor.limit.enabled": true,
    // Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
    "workbench.editor.limit.value": 4,
    // Controls the visibility of the status bar at the bottom of the workbench.
    "workbench.statusBar.visible": false,
    // Controls whether editor file decorations should use badges.
    "workbench.editor.decorations.badges": false,
    // Controls whether opened editors show as preview. 
    // Preview editors do not keep open and are reused until explicitly set to be kept open 
    // (e.g. via double click or editing) and show up with an italic font style.
    "workbench.editor.enablePreview": false,
    // Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. 
    // Select `first` or `last` to open editors independently from the currently active one.
    "workbench.editor.openPositioning": "last",
    // Controls whether lists and trees have smooth scrolling.
    "workbench.list.smoothScrolling": true,
    // When enabled, will show the watermark tips when no editor is open.
    "workbench.tips.enabled": false,
    // Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
    "workbench.editor.showIcons": false,
    // Specifies the theme used in the workbench.
    "workbench.colorTheme": "Darcula Theme 2.0",
    // Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
    //  - null: No file icons
    //  - vs-minimal
    //  - vs-seti
    "workbench.iconTheme": null,
    //
    //
    // Controls the font size in pixels of the terminal.
    "terminal.integrated.fontSize": 14,
    // Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
    "terminal.integrated.drawBoldTextInBrightColors": false,
    // A multiplier to be used on the `deltaY` of mouse wheel scroll events.
    "terminal.integrated.mouseWheelScrollSensitivity": 5,
    // Whether to enable file links in the terminal. 
    // Links can be slow when working on a network drive in particular because each file link is verified against the file system.
    // Changing this will take effect only in new terminals.
    "terminal.integrated.enableFileLinks": false,
    // When set the foreground color of each cell will change to try meet the contrast ratio specified. Example values:
    //
    // - 1: The default, do nothing.
    // - 4.5: WCAG AA compliance (minimum).
    // - 7: WCAG AAA compliance (enhanced).
    // - 21: White on black or black on white.
    "terminal.integrated.minimumContrastRatio": 10,
    // Controls the maximum amount of lines the terminal keeps in its buffer.
    "terminal.integrated.scrollback": 100,
    //
    //
    // Before starting a new debug session in an integrated or external terminal, clear the terminal.
    "debug.terminal.clearBeforeReusing": true,
    // Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.
    "debug.toolBarLocation": "docked",
    //
    //
    // Toml extension settings
    //
    // Align consecutive entries vertically.
    "evenBetterToml.formatter.alignEntries": true,
    // Maximum column width in characters, affects array expansion and collapse, this doesn't take whitespace into account.
    // Note that this is not set in stone, and works on a best-effort basis.
    "evenBetterToml.formatter.columnWidth": {{cookiecutter.editor_line_length}},
    // Alphabetically reorder keys that are not separated by empty lines.
    "evenBetterToml.formatter.reorderKeys": true,
    // Allign comments next to entries.
    "evenBetterToml.formatter.alignComments": true,
    // Show the "Paste JSON as TOML" command in the palette.
    "evenBetterToml.commands.pasteJsonAsToml": true,
    // Enable validation schema.
    "evenBetterToml.schema.enabled": true,
    // k=regex that matches pyproject.toml files, v=file with schema.
    "evenBetterToml.schema.associations": {
        ".*pyproject\\.toml": "./.vscode/pyproject.toml.json"
    },
    //
    //
    // Markdown all-in-one extension settings
    //
    // The root folder for path auto-completion.
    "markdown.extension.completion.root": "${workspaceFolder}",
    // Enable basic math support (powered by KaTex). Might not render properly in Sphinx.
    "markdown.extension.math.enabled": false,
    // Auto show preview to side.
    "markdown.extension.preview.autoShowPreviewToSide": true,
    // Convert image path to absolute path.
    "markdown.extension.print.absoluteImgPath": false,
    // Include VsCode's basic Markdown styles so that the exported HTML looks similar as inside VS Code.
    "markdown.extension.print.includeVscodeStylesheets": false,
    //
    //
    // Autodocstring extension settings
    //
    // Switch between different docstring formats.
    "autoDocstring.docstringFormat": "google",
    // Custom doctring, without type placeholders.
    "autoDocstring.customTemplatePath": ".vscode/custom_dockstring.mustache",
    // Switch of debugging info that is printed for custom docstring.
    "autoDocstring.logLevel": "None",
    // Infer types from type hints, default values and variable names
    "autoDocstring.guessTypes": true,
    // Generate the docstring on pressing enter after opening docstring
    "autoDocstring.generateDocstringOnEnter": true,
    // Include extended summary section in docstring
    "autoDocstring.includeExtendedSummary": true
}